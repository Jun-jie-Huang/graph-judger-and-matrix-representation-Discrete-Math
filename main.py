import graph
import matrix
import judge


# 测试无向图关联矩阵
# direction = False
# g = graph.Graph(directional=direction)
# g.add_node('v1')
# g.add_node('v2')
# g.add_node('v3')
# g.add_node('v4')
# g.add_relation(('v1', 'v4'))
# g.add_relation(('v1', 'v2'))
# g.add_relation(('v1', 'v2'))
# g.add_relation(('v3', 'v4'))
# g.add_relation(('v2', 'v3'))
# g.add_relation(('v4', 'v4'))
# i_mat = matrix.incidence_mat(graph=g, directional=direction)

# 测试有向图关联矩阵
# direction = True
# g = graph.Graph(directional=direction)
# g.add_node('v1')
# g.add_node('v2')
# g.add_node('v3')
# g.add_node('v4')
# g.add_relation(('v4', 'v1'))
# g.add_relation(('v1', 'v2'))
# g.add_relation(('v2', 'v3'))
# g.add_relation(('v4', 'v3'))
# g.add_relation(('v4', 'v3'))
# g.add_relation(('v3', 'v1'))
# g.add_relation(('v1', 'v3'))
# i_mat1 = matrix.incidence_mat(graph=g, directional=direction)

# # 测试有向图邻接矩阵和可达矩阵
# direction = True
# g = graph.Graph(directional=direction)
# g.add_node('v1')
# g.add_node('v2')
# g.add_node('v3')
# g.add_node('v4')
# g.add_relation(('v1', 'v1'))
# g.add_relation(('v1', 'v2'))
# g.add_relation(('v1', 'v2'))
# g.add_relation(('v1', 'v3'))
# g.add_relation(('v2', 'v3'))
# g.add_relation(('v3', 'v4'))
# g.add_relation(('v4', 'v3'))
# a_mat = matrix.adjacency_mat(graph=g, directional=direction)
# r_mat = matrix.reacheable_mat(graph=g, directional=direction)
# print(matrix.mat2str(r_mat))


# # 测试无向图的邻接矩阵和联通矩阵
# direction = False
# g = graph.Graph(directional=direction)
# g.add_node('v1')
# g.add_node('v2')
# g.add_node('v3')
# g.add_node('v4')
# g.add_node('v5')
# g.add_node('v6')
# g.add_relation(('v1', 'v2'))
# g.add_relation(('v2', 'v3'))
# g.add_relation(('v1', 'v3'))
# g.add_relation(('v5', 'v4'))
# a_mat = matrix.adjacency_mat(graph=g, directional=direction)
# r_mat = matrix.reacheable_mat(graph=g, directional=direction)
# print(matrix.mat2str(r_mat))

# # 判断是否为二部图
# direction = False
# g = graph.Graph(directional=direction)
# g.add_node('v1')
# g.add_node('v2')
# g.add_node('v3')
# g.add_node('u1')
# g.add_node('u2')
# g.add_node('u3')
# g.add_node('u4')
# g.add_node('u5')
# g.add_relation(('v1', 'u1'))
# g.add_relation(('v1', 'u2'))
# g.add_relation(('v2', 'u1'))
# g.add_relation(('v2', 'u3'))
# g.add_relation(('v2', 'u4'))
# g.add_relation(('v3', 'u3'))
# g.add_relation(('v3', 'u4'))
# g.add_relation(('v3', 'u5'))
# print(judge.judge_bipartite_graph(g))


# 判断是否为欧拉图
# direction = False
# g = graph.Graph(directional=direction)
# g.add_node('v1')
# g.add_node('v2')
# g.add_node('v3')
# g.add_node('v4')
# g.add_node('v5')
# g.add_node('v6')
# g.add_node('v7')
# g.add_node('v8')
# g.add_relation(('v1', 'v2'))
# g.add_relation(('v1', 'v2'))
# g.add_relation(('v1', 'v3'))
# g.add_relation(('v1', 'v5'))
# g.add_relation(('v2', 'v4'))
# g.add_relation(('v2', 'v6'))
# g.add_relation(('v3', 'v4'))
# g.add_relation(('v3', 'v4'))
# g.add_relation(('v3', 'v7'))
# g.add_relation(('v4', 'v8'))
# g.add_relation(('v5', 'v6'))
# g.add_relation(('v5', 'v7'))
# g.add_relation(('v5', 'v7'))
# g.add_relation(('v6', 'v8'))
# g.add_relation(('v6', 'v8'))
# g.add_relation(('v7', 'v8'))
# print(judge.judge_bipartite_graph(g))
# print(judge.judge_trivial_graph(g))
# print(judge.judge_euler_graph(g))


# 判断是否为平面图
direction = False
g = graph.Graph(directional=direction)
g.add_node('v1')
g.add_node('v2')
g.add_node('v3')
g.add_node('v4')
g.add_node('v5')
g.add_node('v6')
g.add_node('v7')
g.add_relation(('v1', 'v2'))
g.add_relation(('v1', 'v3'))
g.add_relation(('v1', 'v6'))
g.add_relation(('v2', 'v4'))
g.add_relation(('v7', 'v4'))
g.add_relation(('v3', 'v4'))
g.add_relation(('v3', 'v5'))
print(judge.judge_planer_graph(g))

direction = False
g = graph.Graph(directional=direction)
g.add_node('v1')
g.add_node('v2')
g.add_node('v3')
g.add_node('v4')
g.add_relation(('v1', 'v2'))
g.add_relation(('v1', 'v3'))
g.add_relation(('v1', 'v4'))
g.add_relation(('v2', 'v3'))
g.add_relation(('v2', 'v4'))
g.add_relation(('v3', 'v4'))
print(judge.judge_planer_graph(g))

# 有与K5同胚的子图，打印“非平面图”
direction = False
g = graph.Graph(directional=direction)
g.add_node('v1')
g.add_node('v2')
g.add_node('v3')
g.add_node('v4')
g.add_node('v5')
g.add_node('v6')
g.add_node('v7')
g.add_relation(('v1', 'v3'))
g.add_relation(('v1', 'v4'))
g.add_relation(('v2', 'v4'))
g.add_relation(('v2', 'v5'))
g.add_relation(('v3', 'v5'))
g.add_relation(('v3', 'v7'))
g.add_relation(('v3', 'v6'))
g.add_relation(('v2', 'v6'))
g.add_relation(('v1', 'v6'))
print(judge.judge_planer_graph(g))

